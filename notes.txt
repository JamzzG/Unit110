DJANGO and FLASK
Server Libraries for Python (Both are popular and while we are learning FLASK, we are sure to see DJANGO in future.

Some Windows use: python --version
Some Windows use: py --version
Macs will    use:python3 --version

PIP
Python Installer Program? Launcher program

-m stands for module

example:
program   module   installer program    command (this one asks for version)
python      -m             pip              --version

cls = "Clear Screen" gets rid of the clutter

The many versions of Python can cause issues
It is opensource and sometimes the community can change the way certain libraries work and if you have the wrong version it will stop working.

Note: It may be necessary to launch CMD as an administrator to write to disk. (easiest way is to right click the prompt and select 
"run as administrator".


Creating a Virtual Machine or Virtual Environment
1.) Be sure it's inside the folder of the project we want to create. python -m pip install virtualenv


2.) Create new folder for virtual environment (venv)
   program    module   module being called     new folder name   
     py         -m             venv                   venv


3.) EACH TIME WE WANT TO USE SERVER WE NEED TO ACTIVATE IT

        MAC 
        source venv/bin/activate

        WIN 
        venv\Scripts\activate  

(can also deactivate it with deactivate)
On Windows you want to see (venv) before the command prompt.

4.) Open folder inside VSC

5.) Double check that AUTOSAVE is disabled.

6.) Create a .py file and open that inside your cmd venv folder and see if it executes. To start server: 
on Terminal type:
py server.py (py then name of server program)

7.) install flask
py -m install flask

8.) from .py file in VSC type following code: 
from flask import Flask

# debug needs to be True for development and False at Prodcution
 app.run (debug=True) 

Create an endpoint:
#remember / is the root directory 
@app.get ("/")
def home():
    return "hello from flask"

Create another endpoint:
@app.get("/test")
def test():
    return "this another endpoint named test"

@app.get("/api/catalog/<X>") 
    ***(angle braketed variable allows single endpoint with dynamic variable)***
def get_by_category(X):
return "I got: " + category (Testing)

case insensitive search (parse to lowercase) using 
.lower() method

@app.get("/api/catalog/<category>")
def get_by_category(category):
    result = []
    for prod in catalog:
        if prod["category".lower()] == category.lower():
            result.append(prod)

    return json.dumps(result)

    *** The program above returns the requested data after appending the results (note it changed variable and category info into all lowercase to make it case insensitive)



API Application Programming Interface
It's a piece of software to act as an interface to other devices.
API doesn't interact with users, it only works with other devices

API uses JSON or XML

be sure to 
import json       after getting flask at top of document 

.dumps is an instruction to JSON to dump info

More names for APIs are Web APIs and Web Services  

Examples: Google Maps, Yahoo, etc

API endpoints are the requested information that gets returned.

json.dumps(version) .dumps mean to show the contents of the file as a string

JS uses camelCase (lowercase until additional words which get capitalized)
Python uses snake_case (lowercase and underscore to separate)
Most other Languages use PascalCase

API Verbs
.get (decribes method type server will respond to)
.post new or save 
.put server update 
.patch
.delete

Testing Endpoints
    Rest Clients (Post Man, Insomnia Thunder Client-VSC ext) 


You cannot repeat endpoint name with same method type.
Only first endpoint/method will be executed

variables within endpoints cannot  be repeated either.  The pattern much be different.  


To STOP terminal CTRL+C        




01/21 Today's goal is to set up the database for our page.
    DJANGO is most popular database framework but it does frontend and backend
For this project we are just using Flask as we just need the backend.
    Everything will be stored in database except files like images and audio and video
        If you try to store huge files in the database it will be too slow.

There are 2 catagories of databases:
    SQL is a domain-specific language used in programming and designed for 
    managing data held in a relational database management system 
    ● They use structured query language (SQL) for defining and manipulating data.
    ● SQL is one of the most versatile and widely-used options available but can be
       restrictive.
    ● SQL requires that you use predefined schemas to determine the structure of 
    your data before you work with it. In addition, all of your data must follow the 
    same structure. This can require significant upfront preparation.
    *Most large project will use SQL
        Downside: A lot of upfront preparation before you set up the database. You have to redefine the schema before.  It's such a complex area that companies have SQL dedicated teams and engineers.


NoSQL Databases (Don't use programming language)
    ● Has a dynamic schema for unstructured data, and data is stored in many ways: 
       it can be column-oriented, document-oriented, graph based or organized as a 
       KeyValue store.
    ● You can create documents without having to first define their structure
    ●  Each document can have its own unique structure
    ●  The syntax can vary from database to database
        Firebase is a google based NoSQL and Mongo is another.
            They are not similar at all.

MySQL (SQL) vs MongoDB (NoSQL)
● MySQL is an extremely established database, meaning that there’s a huge 
community, extensive testing and quite a bit of stability.
● MySQL is available for all major platforms, including Linux, Windows, Mac, BSD 
and Solaris. It also has connectors to languages like Node.js, Ruby, C#, C++, 
Java, Perl, Python and PHP, meaning that it’s not limited to SQL query 
language.
● The database is open source and free
It's set up like an excel file  

MongoDB (NoSQL)
● Uses Dynamic schema. As mentioned, this gives you flexibility to change your 
data schema without modifying any of your existing data.
● MongoDB is horizontally scalable, which helps reduce the workload and scale 
your business with ease.
● The database doesn’t require a database administrator. Since it is fairly 
user-friendly in this way, it can be used by both developers and administrators.
● It’s high-performing for simple queries.
looks liks a JS Object or Python Dictionary

*Instructor prefers NoSQL for mobile applications  

For this class we will call a MongoDB Service instead of downloading the Mongo Ap

Demo file name:  JamesDB Pass: Test123
ip address 0.0.0.0 (any computer address)

change driver and version on next page
    copy url for the db

create a config.py file
    connect

py -m pip install pymongo "pymongo[srv]" certifi
***py (python) -m (module)  pip (installs packages on python) loads last 3 files***

#Certifi provides Mozilla’s carefully curated collection of Root Certificates for validating the trustworthiness of SSL certificates while verifying the identity of TLS hosts. It has been extracted from the Requests project.


import pymongo
import certifi  

connection_str = "mongodb+srv://JamesDB:Test123@cluster0.z59nvld.mongodb.net/?retryWrites=true&w=majority"
client = pymongo.MongoClient(connection_str, tlsCAFile=certifi.where() )
db = client.get_database("OnlineStore")

"TLS CA File, or tlsCAFile, is a file that contains the certificate of a trusted certificate authority (CA) that is used to verify the authenticity of a SSL/TLS certificate presented by a server. It is used during the SSL/TLS handshaking process to verify the server's identity and ensure that the client is communicating with the intended server and not an imposter."


to escape python use CTRL-Z or exit()


.get retrieve
.post saves data                    it sends the payload (data)
.put modify exitsting
.patch modify exitsting
.delet removes data

always use double quotes and remove commas


mongoDB adds _id:  id:key
and that ObjectId can crash the JSON dumps.


PS C:\Users\grant\OneDrive\Documents\107 Cohort 33\server> git status

Changing Git Repository
git remote rm origin
git remote add origin (NEW GIT URL GOES HERE)
git add .
git commit -m "Project Notes"
git push -u origin master  (First time only, after this is it just:  git push  )





FROM server.py:

@app.get("/api/catalog")
def get_catalog():
    cursor = db.products.find({})
    #return json.dumps(catalog)  (This was just pulling from the mock data file...not the database as the line above does.)  Why is "cursor" used above?  It's a list that only reads the iterations around the cursor.  You can't parse it into a JSON.  It just travels the array and displays what is inside.  You can parse the results.

Notes about processing:
Reading to a file is slow...writing is extremely slow.  NEVER use a file to store data.

    Databases are optimized for data storage and way more efficient at retrieving that data.  They can read and write a single item or filter close to 10k items in just about the same time.

    Two options for getting the info is to read all of them and the use a program to filter those results...or just use the db to filter it for you and it always be faster.

    NoSQL might not be able to do some calculations like lowest price etc.

    DEBUGGING NOTE:  Always check with comparisons that they pass even if first check has no comparison to go off of.

    HTTP requests have time limits...sometimes 3-5 seconds rarely more.

disable cors 
-m pip install flask-cors


from server.py
from flask_cors import CORS

app = Flask ("server")
CORS(app) # disable CORS to allow requests from any origin


THUNDERCLIENT is just for testing...now we need to connect a real client.
Server needs to be running

110 modules exam

pass code:
fsdi110
